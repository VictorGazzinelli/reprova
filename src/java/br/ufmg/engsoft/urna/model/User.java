package br.ufmg.engsoft.urna.model;

import java.util.Objects;

/**
 * The user type.
 */
public class User {
  /**
   * The id of the user.
   * When null, the id will be automatically generated by the database.
   */
  public final String id;
  /**
   * The role of the user. Mustn't be null nor empty.
   */
  public final String role;

  /**
   * Builder for User.
   */
  public static class Builder {
    protected String id;
    protected String role;

    public Builder id(String id) {
      this.id = id;
      return this;
    }

    public Builder role(String role) {
      this.role = role;
      return this;
    }

    /**
     * Build the user.
     * 
     * @throws IllegalArgumentException if any parameter is invalid
     */
    public User build() {
      if (role == null)
        throw new IllegalArgumentException("role mustn't be null");
      else if (role != "TSE" && role != "Clerk")
        throw new IllegalArgumentException("role must be either TSE or Clerk");

      return new User(
          this.id,
          this.role);
    }
  }

  /**
   * Protected constructor, should only be used by the builder.
   */
  protected User(
      String id,
      String role) {
    this.id = id;
    this.role = role;
  }

  /**
   * Equality comparison.
   * Although this object has an id, equality is checked on all fields.
   */
  @Override
  public boolean equals(Object obj) {
    if (obj == this)
      return true;

    if (!(obj instanceof User))
      return false;

    var user = (User) obj;

    return this.id.equals(user.id)
        && this.role.equals(user.role);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        this.id,
        this.role);
  }

  /**
   * Convert a User to String for visualization purposes.
   */
  @Override
  public String toString() {
    var builder = new StringBuilder();

    builder.append("User:\n");
    builder.append("  id: " + this.id + "\n");
    builder.append("  role: " + this.role + "\n");
    return builder.toString();
  }
}
